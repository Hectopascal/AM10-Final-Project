<<<<<<< HEAD
library(dplyr)
library(ggplot2)
library(skimr)
library(recommenderlab)
library(data.table)
library(reshape2)
dat<- read.csv("C:/Users/Yan/Documents/AM10-Final-Project/data/Company_Data_2_2.csv")
movie_data <- fread("movies.csv",stringsAsFactors=FALSE)
rating_data <- fread(input = "ratings.csv", select = c(1:3), nrows = 1e6)
## Use the following genre list for your data ##
list_genre <- c("Action", "Adventure", "Animation", "Children",
"Comedy", "Crime","Documentary", "Drama", "Fantasy",
"Film-Noir", "Horror", "Musical", "Mystery","Romance",
"Sci-Fi", "Thriller", "War", "Western")
repeatMovies <- names(which(table(movie_data$title) > 1))
removeRows <- integer()
for(i in repeatMovies){
repeatMovieLoc <- which(movie_data$title == i)
tempGenre <- paste(movie_data$genres[repeatMovieLoc], collapse="|")
tempGenre <- paste(unique(unlist(strsplit(tempGenre, split = "\\|")[[1]])), collapse = "|")
movie_data$genres[repeatMovieLoc[1]] <- tempGenre
removeRows <- c(removeRows, repeatMovieLoc[-1])
##### REMOVE REPEATS IN RATING DATA ####
repeatMovieIdLoc <- which(rating_data$movieId %in% movie_data$movieId[removeRows])
rating_data$movieId[repeatMovieIdLoc] <- movie_data$movieId[repeatMovieLoc[1]]
}
movie_data$movieId[removeRows]
movie_data <- movie_data[-removeRows,]
movie_data[movie_data$title == repeatMovies[1],]
movie_data[movie_data$title == repeatMovies[2],]
rm(i, removeRows, repeatMovieIdLoc, repeatMovieLoc, repeatMovies, tempGenre)
## There is a risk that the same user has rated a movie multiple times. We can take the best rating ##
rating_data1 <- aggregate(x = rating_data, by = list(rating_data$userId, rating_data$movieId), FUN = max)
rating_data <- rating_data1[,-c(1,2)]
rm(rating_data1)
length(unique(rating_data$movieId))
length(unique(movie_data$movieId))
setdiff(unique(movie_data$movieId), unique(rating_data$movieId))
## These movies were not rated by any user. We ought to remove these from movie_data or, ignore for now.
## It shouldn't affect our recommendations. Also, this would be unlikely in large datasets
ratingMatrix <- dcast(rating_data, userId~movieId, value.var = "rating", na.rm=TRUE)
## UserIds as rows and MovieIds as columns
ratingMatrix <- as.matrix(ratingMatrix[,-1]) #remove userIds
dim(ratingMatrix) ## This is your user-item matric. Finally! Check number of users (rows) against initial numbers
setdiff(movie_data$movieId, as.integer(colnames(ratingMatrix)))
#[1]  1076  2939  3338  3456  4194  5721  6668  6849  7020  7792  8765 25855 26085 30892 32160 32371 34482 85565
# Quick check to see you have same set of movies still :) IN this case we have a few more in movies database.
# It shouldn't affect our analysis so we will ignore.
#Convert rating matrix into a recommenderlab sparse matrix
ratingMatrix <- as(ratingMatrix, "realRatingMatrix")
ratingMatrix
# We assume 100 most popular movies refers to 100 most rated movies
top100movies<-as.data.frame(table(rating_data$movieId)) %>%
arrange(desc(Freq)) %>%
head(100) %>%
summarise(movieId = Var1)
movie100_data<- rating_data %>% filter(movieId %in% top100movies$movieId)
movie100_matrix <- dcast(movie100_data, userId~movieId, value.var = "rating", na.rm=TRUE)
movie100_matrix <- as.matrix(movie100_matrix[,-1])
movie100_matrix <- as(movie100_matrix, "realRatingMatrix")
movie_similarity <- similarity(movie100_matrix,
method = "cosine",
which = "items")
image(as.matrix(movie_similarity), main = "Movies similarity")
top100users<-as.data.frame(table(rating_data$userId)) %>%
arrange(desc(Freq)) %>%
head(100) %>%
summarise(userId = Var1)
top100users<- rating_data %>% filter(userId %in% top100users$userId)
users100_matrix <- dcast(top100users, userId~movieId, value.var = "rating", na.rm=TRUE)
users100_matrix <- as.matrix(users100_matrix[,-1])
users100_matrix <- as(users100_matrix, "realRatingMatrix")
user_similarity <- similarity(users100_matrix,
method = "cosine",
which = "users")
pal<-colorRamp(c("red", "yellow"))
image(as.matrix(user_similarity), main = "Top 100 user's Similarities")
rating_data %>% ggplot(aes(x=rating)) +
geom_histogram(binwidth=0.5)
rating_data %>% ggplot(aes(x=rating)) +
geom_histogram(binwidth=0.5)
movie_ratings <- ratingMatrix[rowCounts(ratingMatrix) > 50,
colCounts(ratingMatrix) > 50]
average_ratings <- rowMeans(movie_ratings)
qplot(average_ratings, fill=I("steelblue"), col=I("white")) +
ggtitle("Distribution of the average rating per user")
m <- c(10, 20, 50, 100, 200)
n <- m
datasets <- list()
for (i in m) {
datasets <- append(datasets, ratingMatrix[rowCounts(ratingMatrix) > i,
colCounts(ratingMatrix) > i])
}
## Build three separate recommendations systems for each of the values of 'n' and 'm' (5 versions for each type of RS)
## Item  Based CF, User Based CF and a Model Based CF using Matrix Factorisation
recommendation_system <- recommenderRegistry$get_entries(dataType ="realRatingMatrix")
ibcf <- list()
ubcf <- list()
mbcf <- list()
test_data <- list()
set.seed(1)
for (i in seq(5)){
print(i)
movie_ratings <- datasets[[i]]
scheme<- evaluationScheme(movie_ratings,method="split",train=0.8, given=-1)
ib_model <- Recommender(data = getData(scheme, "train"),
method = "IBCF",
parameter = list(k = 30))
ib_recommendations <- predict(object = ib_model,
newdata = getData(scheme, "known"),
type="ratings")
ub_model <- Recommender(getData(scheme, "train"),
method = "UBCF",
param=list(normalize = "center", method="Cosine", nn=10))
ub_recommendations <- predict(object = ub_model,
newdata = getData(scheme, "known"),
type="ratings")
mf_model <- Recommender(getData(scheme, "train"),
method = "LIBMF" )
mf_recommendations <- predict(object = ub_model,
newdata = getData(scheme, "known"),
type="ratings")
}
datasets <- list()
for (i in m) {
newMat <- ratingMatrix[rowCounts(ratingMatrix) > i, colCounts(ratingMatrix) > i]
datasets <- append(datasets, newMat[rowCounts(newMat)>given_val])
}
given_val <- 5
datasets <- list()
for (i in m) {
newMat <- ratingMatrix[rowCounts(ratingMatrix) > i, colCounts(ratingMatrix) > i]
datasets <- append(datasets, newMat[rowCounts(newMat)>given_val])
}
test_data <- list()
set.seed(1)
ibcf <- list()
ubcf <- list()
mbcf <- list()
recommendation_system <- recommenderRegistry$get_entries(dataType ="realRatingMatrix")
for (i in seq(5)){
print(i)
movie_ratings <- datasets[[i]]
scheme<- evaluationScheme(movie_ratings,method="split",train=0.8, given=-5)
ib_model <- Recommender(data = getData(scheme, "train"),
method = "IBCF",
parameter = list(k = 30))
ib_recommendations <- predict(object = ib_model,
newdata = getData(scheme, "known"),
type="ratings")
ub_model <- Recommender(getData(scheme, "train"),
method = "UBCF",
param=list(normalize = "center", method="Cosine", nn=10))
ub_recommendations <- predict(object = ub_model,
newdata = getData(scheme, "known"),
type="ratings")
mf_model <- Recommender(getData(scheme, "train"),
method = "LIBMF" )
mf_recommendations <- predict(object = ub_model,
newdata = getData(scheme, "known"),
type="ratings")
}
for (i in seq(5)){
print(i)
movie_ratings <- datasets[[i]]
scheme<- evaluationScheme(movie_ratings,method="split",train=0.8, given=-5)
ib_model <- Recommender(data = getData(scheme, "train"),
method = "IBCF",
parameter = list(k = 30))
ib_recommendations <- predict(object = ib_model,
newdata = getData(scheme, "known"),
type="ratings")
ibcf <- append(ibcf, calcPredictionAccuracy(mf_recommendations, getData(e, "unknown"))[1])
ub_model <- Recommender(getData(scheme, "train"),
method = "UBCF",
param=list(normalize = "center", method="Cosine", nn=10))
ub_recommendations <- predict(object = ub_model,
newdata = getData(scheme, "known"),
type="ratings")
ubcf <- append(ubcf, calcPredictionAccuracy(mf_recommendations, getData(e, "unknown"))[1])
mf_model <- Recommender(getData(scheme, "train"),
method = "LIBMF" )
mf_recommendations <- predict(object = ub_model,
newdata = getData(scheme, "known"),
type="ratings")
mbcf <- append(mbcf, calcPredictionAccuracy(mf_recommendations, getData(e, "unknown"))[1])
}
for (i in seq(5)){
print(i)
movie_ratings <- datasets[[i]]
scheme<- evaluationScheme(movie_ratings,method="split",train=0.8, given=-5)
ib_model <- Recommender(data = getData(scheme, "train"),
method = "IBCF",
parameter = list(k = 30))
ib_recommendations <- predict(object = ib_model,
newdata = getData(scheme, "known"),
type="ratings")
ibcf <- append(ibcf,
calcPredictionAccuracy(mf_recommendations,
getData(scheme, "unknown"))[1])
ub_model <- Recommender(getData(scheme, "train"),
method = "UBCF",
param=list(normalize = "center", method="Cosine", nn=10))
ub_recommendations <- predict(object = ub_model,
newdata = getData(scheme, "known"),
type="ratings")
ubcf <- append(ubcf,
calcPredictionAccuracy(mf_recommendations,
getData(scheme, "unknown"))[1])
mf_model <- Recommender(getData(scheme, "train"),
method = "LIBMF" )
mf_recommendations <- predict(object = ub_model,
newdata = getData(scheme, "known"),
type="ratings")
mbcf <- append(mbcf,
calcPredictionAccuracy(mf_recommendations,
getData(scheme, "unknown"))[1])
}
for (i in seq(5)){
print(i)
movie_ratings <- datasets[[i]]
scheme<- evaluationScheme(movie_ratings,method="split",train=0.8, given=-5)
ib_model <- Recommender(data = getData(scheme, "train"),
method = "IBCF",
parameter = list(k = 30))
ib_recommendations <- predict(object = ib_model,
newdata = getData(scheme, "known"),
type="ratings")
ibcf <- append(ibcf,
calcPredictionAccuracy(ib_recommendations,
getData(scheme, "unknown"))[1])
ub_model <- Recommender(getData(scheme, "train"),
method = "UBCF",
param=list(normalize = "center", method="Cosine", nn=10))
ub_recommendations <- predict(object = ub_model,
newdata = getData(scheme, "known"),
type="ratings")
ubcf <- append(ubcf,
calcPredictionAccuracy(ub_recommendations,
getData(scheme, "unknown"))[1])
mf_model <- Recommender(getData(scheme, "train"),
method = "LIBMF" )
mf_recommendations <- predict(object = ub_model,
newdata = getData(scheme, "known"),
type="ratings")
mbcf <- append(mbcf,
calcPredictionAccuracy(mf_recommendations,
getData(scheme, "unknown"))[1])
}
## Build three separate recommendations systems for each of the values of 'n' and 'm' (5 versions for each type of RS)
## Item  Based CF, User Based CF and a Model Based CF using Matrix Factorisation
recommendation_system <- recommenderRegistry$get_entries(dataType ="realRatingMatrix")
ibcf <- list()
ubcf <- list()
mbcf <- list()
test_data <- list()
set.seed(1)
for (i in seq(5)){
print(i)
movie_ratings <- datasets[[i]]
scheme<- evaluationScheme(movie_ratings,method="split",train=0.8, given=-5)
ib_model <- Recommender(data = getData(scheme, "train"),
method = "IBCF",
parameter = list(k = 30))
ib_recommendations <- predict(object = ib_model,
newdata = getData(scheme, "known"),
type="ratings")
ibcf <- append(ibcf,
calcPredictionAccuracy(ib_recommendations,
getData(scheme, "unknown"))[1])
ub_model <- Recommender(getData(scheme, "train"),
method = "UBCF",
param=list(normalize = "center",
method="Cosine",
nn=25))
ub_recommendations <- predict(object = ub_model,
newdata = getData(scheme, "known"),
type="ratings")
ubcf <- append(ubcf,
calcPredictionAccuracy(ub_recommendations,
getData(scheme, "unknown"))[1])
mf_model <- Recommender(getData(scheme, "train"),
method = "LIBMF" )
mf_recommendations <- predict(object = ub_model,
newdata = getData(scheme, "known"),
type="ratings")
mbcf <- append(mbcf,
calcPredictionAccuracy(mf_recommendations,
getData(scheme, "unknown"))[1])
}
as.data.frame(ibcf)
rbind(as.data.frame(ibcf),as.data.frame(ibcf),as.data.frame(mbcf))
rbind(as.data.frame(ibcf),as.data.frame(ubcf),as.data.frame(mbcf)) %>% mutate(type = c("IBCF","UBCF","MBCF"))
rmse<-rbind(as.data.frame(ibcf),as.data.frame(ubcf),as.data.frame(mbcf)) %>% mutate(type = c("IBCF","UBCF","MBCF"))
rmse<-rbind(as.data.frame(ibcf),as.data.frame(ubcf),as.data.frame(mbcf))
rbind(as.data.frame(ibcf),as.data.frame(ubcf),as.data.frame(mbcf))
rating_data %>% ggplot(aes(x=rating)) +
geom_histogram(binwidth=0.5) %>%
ggtitle("Histogram of rating distribution")
rating_data %>% ggplot(aes(x=rating)) +
geom_histogram(binwidth=0.5) %>%
ggtitle("Histogram of rating distribution")
rating_data %>% ggplot(aes(x=rating)) +
geom_histogram(binwidth=0.5) +
ggtitle("Histogram of rating distribution")
movie_ratings <- ratingMatrix[rowCounts(ratingMatrix) > 10,
colCounts(ratingMatrix) > 10]
average_ratings <- rowMeans(movie_ratings)
qplot(average_ratings, fill=I("steelblue"), col=I("white")) +
ggtitle("Distribution of the average rating per user")
movie_ratings <- ratingMatrix[rowCounts(ratingMatrix) > 20,
colCounts(ratingMatrix) > 20]
average_ratings <- rowMeans(movie_ratings)
qplot(average_ratings, fill=I("steelblue"), col=I("white")) +
ggtitle("Distribution of the average rating per user")
# We assume 100 most popular movies refers to 100 most rated movies
top100movies<-as.data.frame(table(rating_data$movieId)) %>%
arrange(desc(Freq)) %>%
head(100) %>%
summarise(movieId = Var1)
movie100_data<- rating_data %>% filter(movieId %in% top100movies$movieId)
movie100_matrix <- dcast(movie100_data, userId~movieId, value.var = "rating", na.rm=TRUE)
movie100_matrix <- as.matrix(movie100_matrix[,-1])
movie100_matrix <- as(movie100_matrix, "realRatingMatrix")
movie_similarity <- similarity(movie100_matrix,
method = "cosine",
which = "items")
image(as.matrix(movie_similarity), main = "Top 100 Movies similarity")
top100users<-as.data.frame(table(rating_data$userId)) %>%
arrange(desc(Freq)) %>%
head(100) %>%
summarise(userId = Var1)
top100users<- rating_data %>% filter(userId %in% top100users$userId)
users100_matrix <- dcast(top100users, userId~movieId, value.var = "rating", na.rm=TRUE)
users100_matrix <- as.matrix(users100_matrix[,-1])
users100_matrix <- as(users100_matrix, "realRatingMatrix")
user_similarity <- similarity(users100_matrix,
method = "cosine",
which = "users")
pal<-colorRamp(c("red", "yellow"))
image(as.matrix(user_similarity), main = "Top 100 user's Similarities")
rmse<-rbind(as.data.frame(ibcf),as.data.frame(ubcf),as.data.frame(mbcf)) %>% summarize(RMSE,type = c("IBCF","UBCF","MBCF"))
rmse<-rbind(as.data.frame(ibcf),as.data.frame(ubcf),as.data.frame(mbcf)) %>% mutate(type = c("IBCF","UBCF","MBCF"))
as.data.frame(t(as.matrix(rbind(as.data.frame(ibcf),as.data.frame(ubcf),as.data.frame(mbcf)))))
rbind(as.data.frame(ibcf),as.data.frame(ubcf),as.data.frame(mbcf))
as.data.frame(t(as.matrix(rbind(as.data.frame(ibcf),as.data.frame(ubcf),as.data.frame(mbcf))))) %>% mutate(IBCF =V1,UBCF=V2,MBCF=V3)
as.data.frame(t(as.matrix(rbind(as.data.frame(ibcf),as.data.frame(ubcf),as.data.frame(mbcf))))) %>% summarize(IBCF =V1,UBCF=V2,MBCF=V3)
rmse<-as.data.frame(t(as.matrix(rbind(as.data.frame(ibcf),as.data.frame(ubcf),as.data.frame(mbcf))))) %>% summarize(IBCF =V1,UBCF=V2,MBCF=V3)
rmse<-as.data.frame(t(as.matrix(rbind(as.data.frame(ibcf),as.data.frame(ubcf),as.data.frame(mbcf))))) %>% summarize(IBCF =V1,UBCF=V2,MBCF=V3, nm = c(10, 20, 50, 100, 200))
rmse
rmse %>% pivot_longer(c(IBCF,UBCF,MBCF), names_to="model_type",values_to="rmse")
rmse %>% pivot_longer(c(IBCF,UBCF,MBCF), names_to="model_type",values_to="rmse"))
rmse %>% pivot_longer(c(IBCF,UBCF,MBCF), names_to="model_type",values_to="rmse")
import(tidyverse)
library(tidyverse)
rmse %>% pivot_longer(c(IBCF,UBCF,MBCF), names_to="model_type",values_to="rmse")
rmse<-rmse %>% pivot_longer(c(IBCF,UBCF,MBCF), names_to="model_type",values_to="rmse")
rmse%>% ggplot(aes(x=nm,y=rmse,col=model_type))+
geom_line()
rmse
rmse%>% ggplot(aes(x=nm,y=rmse,col=model_type))+
geom_line()
rmse
## Build three separate recommendations systems for each of the values of 'n' and 'm' (5 versions for each type of RS)
## Item  Based CF, User Based CF and a Model Based CF using Matrix Factorisation
recommendation_system <- recommenderRegistry$get_entries(dataType ="realRatingMatrix")
ibcf <- list()
ubcf <- list()
mbcf <- list()
test_data <- list()
set.seed(1)
for (i in seq(5)){
print(i)
movie_ratings <- datasets[[i]]
scheme<- evaluationScheme(movie_ratings,method="split",train=0.8, given=-5)
ib_model <- Recommender(data = getData(scheme, "train"),
method = "IBCF",
parameter = list(k = 30))
ib_recommendations <- predict(object = ib_model,
newdata = getData(scheme, "known"),
type="ratings")
ibcf <- append(ibcf,
calcPredictionAccuracy(ib_recommendations,
getData(scheme, "unknown"))[1])
ub_model <- Recommender(getData(scheme, "train"),
method = "UBCF",
param=list(normalize = "center",
method="Cosine",
nn=25))
ub_recommendations <- predict(object = ub_model,
newdata = getData(scheme, "known"),
type="ratings")
ubcf <- append(ubcf,
calcPredictionAccuracy(ub_recommendations,
getData(scheme, "unknown"))[1])
mf_model <- Recommender(getData(scheme, "train"),
method = "LIBMF" )
mf_recommendations <- predict(object = mf_model,
newdata = getData(scheme, "known"),
type="ratings")
mbcf <- append(mbcf,
calcPredictionAccuracy(mf_recommendations,
getData(scheme, "unknown"))[1])
}
rmse<-as.data.frame(t(as.matrix(rbind(as.data.frame(ibcf),as.data.frame(ubcf),as.data.frame(mbcf))))) %>% summarize(IBCF =V1,UBCF=V2,MBCF=V3, nm = c(10, 20, 50, 100, 200))
rmse<-rmse %>% pivot_longer(c(IBCF,UBCF,MBCF), names_to="model_type",values_to="rmse")
rmse
rmse%>% ggplot(aes(x=nm,y=rmse,col=model_type))+
geom_line()
rmse<-as.data.frame(t(as.matrix(rbind(as.data.frame(ibcf),as.data.frame(ubcf),as.data.frame(mbcf))))) %>% summarize(IBCF =V1,UBCF=V2,MBCF=V3, nm = c(10, 20, 50, 100, 200))
rmse<-rmse %>% pivot_longer(c(IBCF,UBCF,MBCF), names_to="model_type",values_to="rmse")
rmse
rmse%>% ggplot(aes(x=nm,y=rmse,col=model_type))+
geom_line()+
ggtitle("RMSE across n,m values")
rmse
setwd("~/AM10-Final-Project")
library(dplyr)
library(ggplot2)
library(skimr)
library(recommenderlab)
library(data.table)
library(reshape2)
read.csv("data/scores/scores.csv")
data<-read.csv("data/scores/scores.csv")
head(data)
as.Date(data$date)
data%>% mutate(date=as.Date(date)) %>%
group_by(month(date))%>%
summarize(month_neg = mean(neg),
month_neu = mean(neu),
month_pos = mean(pos),
month_comp = mean(compound))
graph<-data%>% mutate(date=as.Date(date)) %>%
group_by(month(date))%>%
summarize(month_neg = mean(neg),
month_neu = mean(neu),
month_pos = mean(pos),
month_comp = mean(compound))
graphdata<-data%>% mutate(date=as.Date(date)) %>%
group_by(month(date))%>%
summarize(month_neg = mean(neg),
month_neu = mean(neu),
month_pos = mean(pos),
month_comp = mean(compound))
graphdata<-data%>% mutate(date=as.Date(date)) %>%
group_by(month(date))%>%
summarize(neg = mean(neg),
neu = mean(neu),
pos = mean(pos),
comp = mean(compound)) %>%
pivot_longer(c(neg,neu,pos,comp),names_to="type",values_to="score")
graphdata<-data%>% mutate(date=as.Date(date)) %>%
group_by(month(date))%>%
summarize(neg = mean(neg),
neu = mean(neu),
pos = mean(pos),
comp = mean(compound)) %>%
pivot_longer(c(neg,neu,pos,comp),names_to="type",values_to="score")
library(tidyverse)
graphdata<-data%>% mutate(date=as.Date(date)) %>%
group_by(month(date))%>%
summarize(neg = mean(neg),
neu = mean(neu),
pos = mean(pos),
comp = mean(compound)) %>%
pivot_longer(c(neg,neu,pos,comp),names_to="type",values_to="score")
graphdata
graphdata<-data%>% mutate(date=as.Date(date)) %>%
group_by(month(date))%>%
summarize(neg = mean(neg),
neu = mean(neu),
pos = mean(pos),
comp = mean(compound),
month = month(date)) %>%
pivot_longer(c(neg,neu,pos,comp),names_to="type",values_to="score")
graphdata
graphdata<-data%>% mutate(date=as.Date(date)) %>%
group_by(month(date))%>%
summarize(neg = mean(neg),
neu = mean(neu),
pos = mean(pos),
comp = mean(compound),
month = 'month(date)') %>%
pivot_longer(c(neg,neu,pos,comp),names_to="type",values_to="score")
graphdata
graphdata<-data%>% mutate(date=as.Date(date)) %>%
mutate(month = month(date)) %>%
group_by(month)%>%
summarize(neg = mean(neg),
neu = mean(neu),
pos = mean(pos),
comp = mean(compound)) %>%
pivot_longer(c(neg,neu,pos,comp),names_to="type",values_to="score")
graphdata
graphdata%>% ggplot(aes(y = score,x=month,col=type)+geom_line()
graphdata%>% ggplot(aes(y = score,x=month,col=type))+geom_line()
graphdata%>% ggplot(aes(y = score,x=month,col=type))+geom_line()
View(data)
View(data)
graphdata[graphdata$type=="neg",]%>% ggplot(aes(y = score,x=month,col=type))+geom_line()
graphdata[graphdata$type=="pos",]%>% ggplot(aes(y = score,x=month,col=type))+geom_line()
graphdata%>% ggplot(aes(y = score,x=month,col=type))+geom_line()
fed_data <- read.csv("data/fed2020.csv")
fed_data <- read.csv("data/fed2020.txt")
fed_data%>% ggplot(aes(y = score,x=month,col=2020))+geom_line()
fed_data %>% pivot_longer(c(neg,neu,pos,comp),names_to="type",values_to="score")
fed_data<-fed_data %>% pivot_longer(c(neg,neu,pos,comp),names_to="type",values_to="score")
fed_data%>% ggplot(aes(y = score,x=month,col=type))+geom_line() +facet_wrap(~year)
fed_data <- read.csv("data/fed_sent.txt")
fed_data<-fed_data %>% pivot_longer(c(neg,neu,pos,comp),names_to="type",values_to="score")
fed_data%>% ggplot(aes(y = score,x=month,col=type))+geom_line() +facet_wrap(~year)
=======
palette = "RdYlGn",
direction = -1,
guide = guide_colorbar(
title = "Number of case",
title.hjust = 0.5,
direction = "horizontal",
nrow = 1,
keyheight = unit(3, units = "mm"),
keywidth = unit(3, units = "mm"),
title.position = "top")) +
theme_ipsum() +
theme(legend.direction = "horizontal",
legend.position = "bottom") +
labs(title = "",
subtitle = "Covid Cases Worldwide ")
title = "Number of case",
map_covid  %>%
ggplot() +
geom_sf(aes(fill = total), size = 0.1, color = "white") +
coord_sf(crs = "+proj=longlat") +
scale_fill_distiller(NULL,
palette = "RdYlGn",
direction = -1,
guide = guide_colorbar(
title = "Number of case",
title.hjust = 0.5,
direction = "horizontal",
nrow = 1,
keyheight = unit(3, units = "mm"),
keywidth = unit(3, units = "mm"),
title.position = "top")) +
theme_minimal() +
theme(legend.direction = "horizontal",
legend.position = "bottom") +
labs(title = "",
subtitle = "Covid Cases Worldwide ")
title = "Number of case",
map_covid  %>%
ggplot() +
geom_sf(aes(fill = total), size = 0.1, color = "white") +
coord_sf(crs = "+proj=longlat") +
scale_fill_distiller(NULL,
palette = "RdYlGn",
direction = -1,
guide = guide_colorbar(
title = "Number of case",
title.hjust = 0.5,
direction = "horizontal",
nrow = 1,
keyheight = unit(3, units = "mm"),
keywidth = unit(3, units = "mm"),
title.position = "top")) +
theme_minimal() +
theme(legend.direction = "horizontal",
legend.position = "bottom" ,
panel.grid.major.y = element_blank()) +
labs(title = "",
subtitle = "Covid Cases Worldwide ")
title = "Number of case",
map_covid  %>%
ggplot() +
geom_sf(aes(fill = total), size = 0.1, color = "white") +
coord_sf(crs = "+proj=longlat") +
scale_fill_distiller(NULL,
palette = "RdYlGn",
direction = -1,
guide = guide_colorbar(
title = "Number of case",
title.hjust = 0.5,
direction = "horizontal",
nrow = 1,
keyheight = unit(3, units = "mm"),
keywidth = unit(3, units = "mm"),
title.position = "top")) +
theme_minimal() +
theme(legend.direction = "horizontal",
legend.position = "bottom" ,
panel.grid.major.y = element_blank() , panel.grid.minor.y = element_blank()) +
labs(title = "",
subtitle = "Covid Cases Worldwide ")
title = "Number of case",
map_covid  %>%
ggplot() +
geom_sf(aes(fill = total), size = 0.1, color = "white") +
coord_sf(crs = "+proj=longlat") +
scale_fill_distiller(
palette = "RdYlGn",
direction = -1,
guide = guide_colorbar(
title = "Number of case",
title.hjust = 0.5,
direction = "horizontal",
nrow = 1,
keyheight = unit(3, units = "mm"),
keywidth = unit(3, units = "mm"),
title.position = "top"  ,
barheight =  10 , barwidth = 1)) +
theme_minimal() +
theme(legend.direction = "horizontal",
legend.position = "bottom" ,
panel.grid.major.y = element_blank() , panel.grid.minor.y = element_blank()) +
labs(title = "",
subtitle = "Covid Cases Worldwide ")
title = "Number of case",
map_covid  %>%
ggplot() +
geom_sf(aes(fill = total), size = 0.1, color = "white") +
coord_sf(crs = "+proj=longlat") +
scale_fill_distiller( palette = "RdYlGn",
direction = -1,
guide = guide_colorbar(
title = "Number of case",
title.hjust = 0.5,
direction = "horizontal",
nrow = 1,
keyheight = unit(3, units = "mm"),
keywidth = unit(3, units = "mm"),
title.position = "top"  ,
barheight =  1 , barwidth = 10)) +
theme_minimal() +
theme(legend.direction = "horizontal",
legend.position = "bottom" ,
panel.grid.major.y = element_blank() , panel.grid.minor.y = element_blank()) +
labs(title = "",
subtitle = "Covid Cases Worldwide ")
title = "Number of case",
map_covid  %>%
ggplot() +
geom_sf(aes(fill = total), size = 0.1, color = "white") +
coord_sf(crs = "+proj=longlat") +
scale_fill_distiller( palette = "RdYlGn",
direction = -1,
guide = guide_colorbar(
title = "Number of case",
title.hjust = 0.5,
direction = "horizontal",
nrow = 1,
keyheight = unit(3, units = "mm"),
keywidth = unit(3, units = "mm"),
title.position = "top"  ,
barheight =  1 , barwidth = 15)) +
theme_minimal() +
theme(legend.direction = "horizontal",
legend.position = "bottom" ,
panel.grid.major.y = element_blank() , panel.grid.minor.y = element_blank()) +
labs(title = "",
subtitle = "Covid Cases Worldwide ")
options(scipen = 999)
map_covid  %>%
ggplot() +
geom_sf(aes(fill = total), size = 0.1, color = "white") +
coord_sf(crs = "+proj=longlat") +
scale_fill_distiller( palette = "RdYlGn",
direction = -1,
guide = guide_colorbar(
title = "Number of case",
title.hjust = 0.5,
direction = "horizontal",
nrow = 1,
keyheight = unit(3, units = "mm"),
keywidth = unit(3, units = "mm"),
title.position = "top"  ,
barheight =  1 , barwidth = 15)) +
theme_minimal() +
theme(legend.direction = "horizontal",
legend.position = "bottom" ,
panel.grid.major.y = element_blank() , panel.grid.minor.y = element_blank()) +
labs(title = "",
subtitle = "Covid Cases Worldwide ")
map_covid  %>%
ggplot() +
geom_sf(aes(fill = total), size = 0.1, color = "white") +
coord_sf(crs = "+proj=longlat") +
scale_fill_distiller( palette = "RdYlGn",
direction = -1,
labels = scales::comma,
guide = guide_colorbar(
title = "Number of case",
title.hjust = 0.5,
direction = "horizontal",
nrow = 1,
keyheight = unit(3, units = "mm"),
keywidth = unit(3, units = "mm"),
title.position = "top"  ,
barheight =  1 , barwidth = 15)) +
theme_minimal() +
theme(legend.direction = "horizontal",
legend.position = "bottom" ,
panel.grid.major.y = element_blank() , panel.grid.minor.y = element_blank()) +
labs(title = "",
subtitle = "Covid Cases Worldwide ")
map_covid  %>%
ggplot() +
geom_sf(aes(fill = total), size = 0.1, color = "white") +
coord_sf(crs = "+proj=longlat") +
scale_fill_distiller( palette = "RdYlGn",
direction = -1,
labels = scales::comma,
guide = guide_colorbar(
title = "Number of case",
title.hjust = 0.5,
direction = "horizontal",
nrow = 1,
keyheight = unit(3, units = "mm"),
keywidth = unit(3, units = "mm"),
title.position = "top"  ,
barheight =  1 , barwidth = 15)) +
theme_minimal() +
theme(legend.direction = "horizontal",
legend.position = "bottom" ,
panel.grid.major.y = element_blank() , panel.grid.minor.y = element_blank()) +
labs(title = "",
subtitle = "Covid Cases Worldwide ")
map_covid  %>%
ggplot() +
geom_sf(aes(fill = total), size = 0.1, color = "white") +
coord_sf(crs = "+proj=longlat") +
scale_fill_distiller( palette = "RdYlGn",
direction = -1,
labels = paste0(fill, "M"),
breaks = 10^6 * fill
guide = guide_colorbar(
map_covid  %>%
ggplot() +
geom_sf(aes(fill = total), size = 0.1, color = "white") +
coord_sf(crs = "+proj=longlat") +
scale_fill_distiller( palette = "RdYlGn",
direction = -1,
labels = paste0(scales::comma/1e6, "M"),
guide = guide_colorbar(
title = "Number of case",
title.hjust = 0.5,
direction = "horizontal",
nrow = 1,
keyheight = unit(3, units = "mm"),
keywidth = unit(3, units = "mm"),
title.position = "top"  ,
barheight =  1 , barwidth = 15)) +
theme_minimal() +
theme(legend.direction = "horizontal",
legend.position = "bottom" ,
panel.grid.major.y = element_blank() , panel.grid.minor.y = element_blank()) +
labs(title = "",
subtitle = "Covid Cases Worldwide ")
map_covid  %>%
ggplot() +
geom_sf(aes(fill = total), size = 0.1, color = "white") +
coord_sf(crs = "+proj=longlat") +
scale_fill_distiller( palette = "RdYlGn",
direction = -1,
labels = paste0(total/1e6, "M"),
guide = guide_colorbar(
title = "Number of case",
title.hjust = 0.5,
direction = "horizontal",
nrow = 1,
keyheight = unit(3, units = "mm"),
keywidth = unit(3, units = "mm"),
title.position = "top"  ,
barheight =  1 , barwidth = 15)) +
theme_minimal() +
theme(legend.direction = "horizontal",
legend.position = "bottom" ,
panel.grid.major.y = element_blank() , panel.grid.minor.y = element_blank()) +
labs(title = "",
subtitle = "Covid Cases Worldwide ")
map_covid  %>%
ggplot() +
geom_sf(aes(fill = total), size = 0.1, color = "white") +
coord_sf(crs = "+proj=longlat") +
scale_fill_distiller( palette = "RdYlGn",
direction = -1,
labels = unit_format(unit = "M", scale = 1e-6),
guide = guide_colorbar(
title = "Number of case",
title.hjust = 0.5,
direction = "horizontal",
nrow = 1,
keyheight = unit(3, units = "mm"),
keywidth = unit(3, units = "mm"),
title.position = "top"  ,
barheight =  1 , barwidth = 15)) +
theme_minimal() +
theme(legend.direction = "horizontal",
legend.position = "bottom" ,
panel.grid.major.y = element_blank() , panel.grid.minor.y = element_blank()) +
labs(title = "",
subtitle = "Covid Cases Worldwide ")
map_covid  %>%
ggplot() +
geom_sf(aes(fill = total), size = 0.1, color = "white") +
coord_sf(crs = "+proj=longlat") +
scale_fill_distiller( palette = "RdYlGn",
direction = -1,
guide = guide_colorbar(
title = "Number of case",
title.hjust = 0.5,
direction = "horizontal",
nrow = 1,
keyheight = unit(3, units = "mm"),
keywidth = unit(3, units = "mm"),
title.position = "top"  ,
barheight =  1 , barwidth = 15)) +
theme_minimal() +
theme(legend.direction = "horizontal",
legend.position = "bottom" ,
panel.grid.major.y = element_blank() , panel.grid.minor.y = element_blank()) +
labs(title = "",
subtitle = "Covid Cases Worldwide ")
map_covi
map_covid
map_covid %>%
filter(admin = 'United States')
map_covid %>%
filter(admin == 'United States')
map_covid %>%
arrange(desc(total))
#getting total column
covid$total <- rowSums(covid[,c(1:314)] , na.rm = TRUE)
#extracting only the iso_a3 and total
map_covid <- covid %>%
select(iso_a3 , total)
map_covid %>%
arrange(desc(total))
covid
View(covid)
View(covid)
covid <- covid[-1 ,c(5:319)] %>%
rename('iso_a3' = 'iso_3166_1_alpha_3_codes')
covid <- read_csv('data/covid_jh.csv')
covid <- read_csv('data/covid_jh.csv')
covid <- clean_names(covid)
covid <- covid[-1 ,c(5:319)] %>%
rename('iso_a3' = 'iso_3166_1_alpha_3_codes')
covid <- covid[-1 ,c(318:319)] %>%
rename('iso_a3' = 'iso_3166_1_alpha_3_codes')
covid <- read_csv('data/covid_jh.csv')
covid <- read_csv('data/covid_jh.csv')
covid <- clean_names(covid)
covid <- covid[-1 ,c(318:319)] %>%
rename('iso_a3' = 'iso_3166_1_alpha_3_codes')
covid
covid <- read_csv('data/covid_jh.csv')
covid <- read_csv('data/covid_jh.csv')
covid <- clean_names(covid)
covid <- covid[-1 ,c(318:319)] %>%
rename('iso_a3' = 'iso_3166_1_alpha_3_codes')
covid
covid_1 <- read_csv('data/covid_jh.csv')
covid <- covid_1[-1 ,c(318:319)] %>%
rename('iso_a3' = 'iso_3166_1_alpha_3_codes') %>%
group_by(iso_a3) %>%
summarise(total = sum(x11_30_20))
covid_1 <- read_csv('data/covid_jh.csv')
covid_1<- clean_names(covid)
covid_1<- clean_names(covid_1)
covid_1 <- read_csv('data/covid_jh.csv')
covid_1<- clean_names(covid_1)
covid <- covid_1[-1 ,c(318:319)] %>%
rename('iso_a3' = 'iso_3166_1_alpha_3_codes') %>%
group_by(iso_a3) %>%
summarise(total = sum(x11_30_20))
covid
#extracting only the iso_a3 and total
map_covid <- covid %>%
select(iso_a3 , total)
#getting geometrty and isocodes
earth <- ne_countries(scale = 50, returnclass = "sf") %>%
select(admin, geometry, iso_a3)
map_covid <- left_join(map_covid , earth , by = 'iso_a3')
map_covid <- map_covid %>%
select(admin, total, geometry) %>%
sf::st_as_sf()
options(scipen = 999)
map_covid  %>%
ggplot() +
geom_sf(aes(fill = total), size = 0.1, color = "white") +
coord_sf(crs = "+proj=longlat") +
scale_fill_distiller( palette = "RdYlGn",
direction = -1,
labels = unit_format(unit = "M", scale = 1e-6),
guide = guide_colorbar(
title = "Number of case",
title.hjust = 0.5,
direction = "horizontal",
nrow = 1,
keyheight = unit(3, units = "mm"),
keywidth = unit(3, units = "mm"),
title.position = "top"  ,
barheight =  1 , barwidth = 15)) +
theme_minimal() +
theme(legend.direction = "horizontal",
legend.position = "bottom" ,
panel.grid.major.y = element_blank() , panel.grid.minor.y = element_blank()) +
labs(title = "",
subtitle = "Covid Cases Worldwide ")
map_covid  %>%
ggplot() +
geom_sf(aes(fill = log(total)), size = 0.1, color = "white") +
coord_sf(crs = "+proj=longlat") +
scale_fill_distiller( palette = "RdYlGn",
direction = -1,
guide = guide_colorbar(
title = "Number of cases",
title.hjust = 0.5,
direction = "horizontal",
nrow = 1,
keyheight = unit(3, units = "mm"),
keywidth = unit(3, units = "mm"),
title.position = "top"  ,
barheight =  1.25 , barwidth = 15)) +
theme_minimal() +
theme(legend.direction = "horizontal",
legend.position = "bottom" ,
panel.grid.major.y = element_blank() , panel.grid.minor.y = element_blank()) +
labs(title = "",
subtitle = "Covid Cases Worldwide ")
map_covid  %>%
ggplot() +
geom_sf(aes(fill = total), size = 0.1, color = "white") +
coord_sf(crs = "+proj=longlat") +
scale_fill_distiller( palette = "Spectral",
direction = -1,
labels = unit_format(unit = "M", scale = 1e-6),
guide = guide_colorbar(
title = "Number of cases",
title.hjust = 0.5,
direction = "horizontal",
nrow = 1,
keyheight = unit(3, units = "mm"),
keywidth = unit(3, units = "mm"),
title.position = "top"  ,
barheight =  1.25 , barwidth = 15)) +
theme_minimal() +
theme(legend.direction = "horizontal",
legend.position = "bottom" ,
panel.grid.major.y = element_blank() , panel.grid.minor.y = element_blank()) +
labs(title = "",
subtitle = "Covid Cases Worldwide ")
#importing dataset
library(gapminder)
gapminder
#extracting populatuion
gapminder %>%
filter(year = 2020)
gapminder
#extracting populatuion
gapminder %>%
filter(year = 2009)
install.packages('wp2019')
#extracting populatuion
library(wp2019)
install.packages('wpp2019')
#extracting populatuion
library(wpp2019)
wpp2019
wpp2019::pop
wpp2019::data(pop)
data(pop)
pop
#getting geometrty and isocodes
ne_countries(scale = 50, returnclass = "sf") %>%
select(admin, geometry, iso_a3)
#getting geometrty and isocodes
ne_countries(scale = 50, returnclass = "sf")
#getting geometrty and isocodes
ne_countries(scale = 50, returnclass = "sf") %>%
select(iso_a3  , un_a3 )
#getting geometrty and isocodes
iso_un <- ne_countries(scale = 50, returnclass = "sf") %>%
select(iso_a3  , un_a3 )
pop
pop_2020 <- pop %>%
select(country_code , 2020)
pop
pop_2020 <- pop %>%
select(c(1,17))
pop_2020
left_join(pop_202, iso_un , by = c('country_code' = 'un_a3'))
left_join(pop_2020, iso_un , by = c('country_code' = 'un_a3'))
#getting geometrty and isocodes
iso_un <- ne_countries(scale = 50, returnclass = "sf") %>%
select(iso_a3  , un_a3 )
left_join(pop_2020, iso_un , by = c('country_code' = 'un_a3'))
iso_un
ne_countries
left_join(pop_2020, iso_un , by = c('country_code' = 'un_a3'))
pop_2020
glimpse$pop_2020
glimpse(pop_2020)
left_join(pop_2020, iso_un , by = c('country_code ' = 'un_a3'))
left_join(pop_2020, iso_un , by = c('country_code' = 'un_a3'))
#getting geometrty and isocodes
iso_un <- ne_countries(scale = 50, returnclass = "sf") %>%
select(iso_a3  , un_a3 ) %>%
mutate(un_a3 = as.integer(un_a3))
left_join(pop_2020, iso_un , by = c('country_code' = 'un_a3'))
iso_un
left_join(pop_2020, iso_un , by = c('country_code' = 'un_a3'))
View(left_join(pop_2020, iso_un , by = c('country_code' = 'un_a3')))
View(left_join(pop_2020, iso_un , by = c('country_code' = 'un_a3')))
ne_countries(scale = 50, returnclass = "sf")
#getting geometrty and isocodes
iso_un <- ne_countries(scale = 50, returnclass = "sf") %>%
select(iso_a3  , un_a3 , iso_n3  ) %>%
mutate(un_a3 = as.integer(un_a3))
left_join(pop_2020, iso_un , by = c('country_code' = 'iso_n3'))
#getting geometrty and isocodes
iso_un <- ne_countries(scale = 50, returnclass = "sf") %>%
select(iso_a3  , un_a3 , iso_n3  ) %>%
mutate(un_a3 = as.integer(un_a3) , iso_n3 = as.integer(iso_n3))
left_join(pop_2020, iso_un , by = c('country_code' = 'iso_n3'))
>>>>>>> 97cf33f98a905f5c5aa99830194cc64631fbcbd4
