---
title: "Reccomendation System"
author: "Himanshu Singh"
date: "`r Sys.Date()`"
output: 
    html_document:
      number_sections: true
      highlight: haddock
      theme: spacelab
      toc: yes
      toc_depth: 2
      toc_float:
        collapsed: false
      fontzize: 10pt
---



```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(lubridate)
library(cluster)
library(Hmisc)
library(factoextra)
library(purrr)
library(gridExtra)
library(data.table)
library(reshape2)
library(recommenderlab)
library(ggplot2)         
```

```{r setup2, include=FALSE}
knitr::opts_chunk$set(echo = TRUE , 
                      warnings = FALSE , 
                      message = FALSE)
```



# Importing and Cleaning the Data




```{r}
# importing the data 
#### LOAD DATA ####

movie_data <- read_csv("movies.csv")
rating_data <- read_csv("ratings.csv")%>% 
          select(c(1:3)) %>% 
          top_n(1e6)

glimpse(movie_data)
glimpse(rating_data)
```

I will next restrict the genres as there are some movies that don't have a valid genre valid. 

```{r}
# Use the following genre list for your data ##

list_genre <- c("Action", "Adventure", "Animation", "Children", 
                "Comedy", "Crime","Documentary", "Drama", "Fantasy",
                "Film-Noir", "Horror", "Musical", "Mystery","Romance",
                "Sci-Fi", "Thriller", "War", "Western")


#removing movies that do not belong to a genre in the list above
#need to get a list of all genres in dataframe 

loc = 1 
for (i in movie_data$genres){
  #extract row number of repeat movie loc 
  
  #extract temp genre 
  tempGenre <- paste(i, collapse="|")
  
  #split the row into strings 
  #use unique get rid of duplicate genre
  #recombine string
  tempGenre <- unique(strsplit(tempGenre, split = "\\|")[[1]])
  
  if(length(setdiff(tempGenre, list_genre)) > 0){
    for (l in setdiff(tempGenre, list_genre)){
      tempGenre <- gsub(l , '' , tempGenre)
    }
    movie_data$genres[loc] <- paste(tempGenre , collapse = '|') 
  }
  
  #update the movie location
  loc = loc + 1
  
}


##remove the na values in genres 
movie_data <- movie_data %>% 
  filter(!is.na(genres))

```



There are also some duplicates in the movie database, so next I will remove these duplicates. 
```{r}
#removing the duplicate movie rows 
repeatMovies <- names(which(table(movie_data$title) > 1))

removeRows <- integer()

for(i in repeatMovies){
  #extract row number of repeat movie loc 
  repeatMovieLoc <- which(movie_data$title == i)
  
  
  #extract temp genre 
  tempGenre <- paste(movie_data$genres[repeatMovieLoc], collapse="|")
  
  #split the row into strings 
  #use unique get rid of duplicate genre
  #recombine string
  tempGenre <- paste(
    unique(
      strsplit(tempGenre, split = "\\|")[[1]]) , collapse = "|")
  
  
  #re insert the string into the row 
  movie_data$genres[repeatMovieLoc[1]] <- tempGenre
  #delete the other rows 
  removeRows <- c(removeRows, repeatMovieLoc[-1])
  
  ##### REMOVE REPEATS IN RATING DATA ####
  repeatMovieIdLoc <- which(rating_data$movieId %in% movie_data$movieId[removeRows])
  rating_data$movieId[repeatMovieIdLoc] <- movie_data$movieId[repeatMovieLoc[1]]
}


movie_data <- movie_data[-removeRows,]

#delete these variables 
rm(i, removeRows, repeatMovieIdLoc, repeatMovieLoc, repeatMovies, tempGenre)
rm(l , list_genre, loc)

```


```{r}


## There is a risk that the same user has rated a movie multiple times. We can take the best rating ##
rating_data1 <- aggregate(x = rating_data, by = list(rating_data$userId, rating_data$movieId), FUN = max)
rating_data <- rating_data1[,-c(1,2)]

## QUICK CHECKS OF THE DATA WE HAVE JUST LOADED n CLEANED ##
#str(movie_data)
#summary(movie_data)    
#head(movie_data)
#summary(rating_data)   
head(rating_data)



```



# Expolratory Data Analysis 

Before we can build heat maps and do further exploration of the data we need to build an interaction matrix as well as a similarity matrix. 


```{r}
#creating a wde format rating matrix

ratingMatrix <-  reshape2::dcast(rating_data, userId~movieId, value.var = "rating", na.rm=TRUE)
#remove user id col
ratingMatrix <- as.matrix(ratingMatrix[, -1])


#Convert rating matrix into a recommenderlab sparse matrix
ratingMatrix <- as(ratingMatrix, "realRatingMatrix")


dim(ratingMatrix)
```





## Build heat maps to show how similar 100 most popular movies are to each other 

```{r}
#getting list of top 100 movies 
top100_ids <- rating_data %>% 
  group_by(movieId) %>% 
  tally() %>% 
  arrange(desc(n)) %>% 
  top_n(100)

ids <- top100_ids$movieId




#creating a similarity matrix
movies_similarity <- similarity(ratingMatrix[,c(ids)],
                             method = "cosine",
                             which = "items")
movies_similarity <- as.matrix(movies_similarity)

melted_cormat <- melt(movies_similarity, varnames = c("row", "col"))

ggplot(data = melted_cormat, aes(x=row, y= col, fill=value)) + 
  geom_tile() + 
  theme(
  axis.title.x = element_blank(),
  axis.title.y = element_blank(),
  panel.grid.major = element_blank(),
  panel.border = element_blank(),
  panel.background = element_blank(),
  axis.ticks = element_blank())
```

```{r}
ratingMatrix[,as.list(ids)]


tas.
```


```{r}
# The mtcars dataset:
data <- as.matrix(mtcars)

# Default Heatmap
heatmap(data)
```






# Building Models 




# Model Validation 